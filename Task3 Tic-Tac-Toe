<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            padding: 30px;
            max-width: 500px;
            width: 100%;
            text-align: center;
        }

        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 2.5rem;
        }

        .game-info {
            margin-bottom: 25px;
        }

        .status {
            font-size: 1.4rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
            min-height: 32px;
        }

        .score-board {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 20px;
        }

        .score {
            background: #34495e;
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            font-weight: 600;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #3498db;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-mode {
            background: #2ecc71;
        }

        .btn-reset {
            background: #e74c3c;
        }

        .btn-new-game {
            background: #f39c12;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin: 0 auto 25px;
            max-width: 300px;
        }

        .cell {
            aspect-ratio: 1;
            background: #ecf0f1;
            border: none;
            border-radius: 10px;
            font-size: 3rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .cell:hover {
            background: #d5dbdb;
            transform: scale(1.05);
        }

        .cell.x {
            color: #e74c3c;
        }

        .cell.o {
            color: #3498db;
        }

        .cell.winner {
            background: #2ecc71;
            color: white;
            animation: pulse 1s infinite;
        }

        .game-mode {
            margin-bottom: 20px;
            font-weight: 600;
            color: #7f8c8d;
        }

        .difficulty {
            margin-top: 15px;
        }

        .difficulty select {
            padding: 8px 15px;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            font-size: 1rem;
            background: white;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease;
        }

        /* Responsive Design */
        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .cell {
                font-size: 2.5rem;
            }
            
            .btn {
                padding: 10px 20px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tic-Tac-Toe</h1>
        
        <div class="game-info">
            <div class="status" id="status">Player X's Turn</div>
            <div class="game-mode" id="gameMode">Mode: Player vs Player</div>
            
            <div class="score-board">
                <div class="score">Player X: <span id="scoreX">0</span></div>
                <div class="score">Player O: <span id="scoreO">0</span></div>
            </div>
        </div>

        <div class="controls">
            <button class="btn btn-mode" id="modeBtn">Switch to vs Computer</button>
            <button class="btn btn-new-game" id="newGameBtn">New Game</button>
            <button class="btn btn-reset" id="resetBtn">Reset Scores</button>
        </div>

        <div class="difficulty" id="difficultyContainer" style="display: none;">
            <label for="difficulty">Computer Difficulty:</label>
            <select id="difficulty">
                <option value="easy">Easy</option>
                <option value="medium" selected>Medium</option>
                <option value="hard">Hard</option>
            </select>
        </div>

        <div class="game-board" id="gameBoard">
            <!-- Cells will be generated by JavaScript -->
        </div>
    </div>

    <script>
        class TicTacToe {
            constructor() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                this.gameMode = 'pvp'; // 'pvp' or 'pvc'
                this.scores = { X: 0, O: 0 };
                this.difficulty = 'medium';
                
                this.initializeGame();
                this.setupEventListeners();
            }

            initializeGame() {
                this.createBoard();
                this.updateStatus();
                this.updateScores();
            }

            createBoard() {
                const gameBoard = document.getElementById('gameBoard');
                gameBoard.innerHTML = '';
                
                for (let i = 0; i < 9; i++) {
                    const cell = document.createElement('button');
                    cell.className = 'cell';
                    cell.dataset.index = i;
                    cell.addEventListener('click', () => this.handleCellClick(i));
                    gameBoard.appendChild(cell);
                }
            }

            handleCellClick(index) {
                if (!this.gameActive || this.board[index] !== '') {
                    return;
                }

                // Player's move
                this.makeMove(index);

                // Computer's move in PVC mode
                if (this.gameActive && this.gameMode === 'pvc' && this.currentPlayer === 'O') {
                    setTimeout(() => {
                        this.computerMove();
                    }, 500);
                }
            }

            makeMove(index) {
                this.board[index] = this.currentPlayer;
                this.updateBoard();
                
                if (this.checkWinner()) {
                    this.handleWin();
                } else if (this.isBoardFull()) {
                    this.handleDraw();
                } else {
                    this.switchPlayer();
                    this.updateStatus();
                }
            }

            computerMove() {
                if (!this.gameActive) return;

                let move;
                
                switch (this.difficulty) {
                    case 'easy':
                        move = this.getRandomMove();
                        break;
                    case 'medium':
                        move = this.getMediumMove();
                        break;
                    case 'hard':
                        move = this.getBestMove();
                        break;
                }

                if (move !== -1) {
                    this.makeMove(move);
                }
            }

            getRandomMove() {
                const emptyCells = this.board
                    .map((cell, index) => cell === '' ? index : -1)
                    .filter(index => index !== -1);
                
                return emptyCells.length > 0 ? 
                    emptyCells[Math.floor(Math.random() * emptyCells.length)] : -1;
            }

            getMediumMove() {
                // Try to win or block opponent
                const winMove = this.findWinningMove('O');
                if (winMove !== -1) return winMove;

                const blockMove = this.findWinningMove('X');
                if (blockMove !== -1) return blockMove;

                // Take center if available
                if (this.board[4] === '') return 4;

                // Take corners if available
                const corners = [0, 2, 6, 8];
                const emptyCorners = corners.filter(index => this.board[index] === '');
                if (emptyCorners.length > 0) {
                    return emptyCorners[Math.floor(Math.random() * emptyCorners.length)];
                }

                // Random move
                return this.getRandomMove();
            }

            getBestMove() {
                // Minimax algorithm for hard difficulty
                return this.minimax(this.board, 'O').index;
            }

            minimax(newBoard, player) {
                const availableSpots = newBoard
                    .map((cell, index) => cell === '' ? index : -1)
                    .filter(index => index !== -1);

                // Check for terminal states
                if (this.checkWin(newBoard, 'X')) {
                    return { score: -10 };
                } else if (this.checkWin(newBoard, 'O')) {
                    return { score: 10 };
                } else if (availableSpots.length === 0) {
                    return { score: 0 };
                }

                const moves = [];
                for (let i = 0; i < availableSpots.length; i++) {
                    const move = {};
                    move.index = availableSpots[i];
                    newBoard[availableSpots[i]] = player;

                    if (player === 'O') {
                        const result = this.minimax(newBoard, 'X');
                        move.score = result.score;
                    } else {
                        const result = this.minimax(newBoard, 'O');
                        move.score = result.score;
                    }

                    newBoard[availableSpots[i]] = '';
                    moves.push(move);
                }

                let bestMove;
                if (player === 'O') {
                    let bestScore = -Infinity;
                    for (let i = 0; i < moves.length; i++) {
                        if (moves[i].score > bestScore) {
                            bestScore = moves[i].score;
                            bestMove = i;
                        }
                    }
                } else {
                    let bestScore = Infinity;
                    for (let i = 0; i < moves.length; i++) {
                        if (moves[i].score < bestScore) {
                            bestScore = moves[i].score;
                            bestMove = i;
                        }
                    }
                }

                return moves[bestMove];
            }

            findWinningMove(player) {
                for (let i = 0; i < 9; i++) {
                    if (this.board[i] === '') {
                        this.board[i] = player;
                        if (this.checkWin(this.board, player)) {
                            this.board[i] = '';
                            return i;
                        }
                        this.board[i] = '';
                    }
                }
                return -1;
            }

            checkWin(board = this.board, player = this.currentPlayer) {
                const winPatterns = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                    [0, 4, 8], [2, 4, 6] // diagonals
                ];

                return winPatterns.some(pattern => 
                    pattern.every(index => board[index] === player)
                );
            }

            checkWinner() {
                return this.checkWin();
            }

            isBoardFull() {
                return this.board.every(cell => cell !== '');
            }

            handleWin() {
                this.gameActive = false;
                this.scores[this.currentPlayer]++;
                this.updateScores();
                
                // Highlight winning cells
                this.highlightWinningCells();
                
                this.updateStatus(`Player ${this.currentPlayer} Wins!`);
            }

            handleDraw() {
                this.gameActive = false;
                this.updateStatus("It's a Draw!");
            }

            highlightWinningCells() {
                const winPatterns = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8],
                    [0, 3, 6], [1, 4, 7], [2, 5, 8],
                    [0, 4, 8], [2, 4, 6]
                ];

                for (const pattern of winPatterns) {
                    if (pattern.every(index => this.board[index] === this.currentPlayer)) {
                        pattern.forEach(index => {
                            const cell = document.querySelector(`[data-index="${index}"]`);
                            cell.classList.add('winner');
                        });
                        break;
                    }
                }
            }

            switchPlayer() {
                this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
            }

            updateStatus(message = null) {
                const statusElement = document.getElementById('status');
                if (message) {
                    statusElement.textContent = message;
                } else {
                    statusElement.textContent = this.gameMode === 'pvc' && this.currentPlayer === 'O' ? 
                        "Computer's Turn" : `Player ${this.currentPlayer}'s Turn`;
                }
                statusElement.classList.add('fade-in');
                setTimeout(() => statusElement.classList.remove('fade-in'), 500);
            }

            updateBoard() {
                this.board.forEach((value, index) => {
                    const cell = document.querySelector(`[data-index="${index}"]`);
                    cell.textContent = value;
                    cell.className = `cell ${value.toLowerCase()}`;
                });
            }

            updateScores() {
                document.getElementById('scoreX').textContent = this.scores.X;
                document.getElementById('scoreO').textContent = this.scores.O;
            }

            resetGame() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                this.createBoard();
                this.updateStatus();
            }

            newGame() {
                this.resetGame();
            }

            resetScores() {
                this.scores = { X: 0, O: 0 };
                this.updateScores();
                this.resetGame();
            }

            toggleGameMode() {
                this.gameMode = this.gameMode === 'pvp' ? 'pvc' : 'pvp';
                document.getElementById('gameMode').textContent = 
                    `Mode: ${this.gameMode === 'pvp' ? 'Player vs Player' : 'Player vs Computer'}`;
                
                document.getElementById('difficultyContainer').style.display = 
                    this.gameMode === 'pvc' ? 'block' : 'none';
                
                document.getElementById('modeBtn').textContent = 
                    this.gameMode === 'pvp' ? 'Switch to vs Computer' : 'Switch to vs Player';
                
                this.resetGame();
            }

            setDifficulty(level) {
                this.difficulty = level;
            }

            setupEventListeners() {
                document.getElementById('modeBtn').addEventListener('click', () => {
                    this.toggleGameMode();
                });

                document.getElementById('newGameBtn').addEventListener('click', () => {
                    this.newGame();
                });

                document.getElementById('resetBtn').addEventListener('click', () => {
                    this.resetScores();
                });

                document.getElementById('difficulty').addEventListener('change', (e) => {
                    this.setDifficulty(e.target.value);
                });

                // Keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'n' || e.key === 'N') {
                        this.newGame();
                    } else if (e.key === 'r' || e.key === 'R') {
                        this.resetScores();
                    } else if (e.key === 'm' || e.key === 'M') {
                        this.toggleGameMode();
                    }
                });
            }
        }

        // Initialize the game when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new TicTacToe();
        });
    </script>
</body>
</html>
