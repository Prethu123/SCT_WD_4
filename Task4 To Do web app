<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List App</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            padding: 30px;
            max-width: 800px;
            width: 100%;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
        }

        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }

        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
            font-size: 1.1rem;
        }

        /* Header Section */
        .app-header {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .task-input {
            flex: 1;
            min-width: 250px;
        }

        .task-input input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #bdc3c7;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .task-input input:focus {
            outline: none;
            border-color: #3498db;
        }

        .btn {
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-success {
            background: #2ecc71;
            color: white;
        }

        .btn-warning {
            background: #f39c12;
            color: white;
        }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

        /* Filter Section */
        .filter-section {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 20px;
            border: 2px solid #bdc3c7;
            background: white;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .filter-btn.active {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

        .filter-btn:hover {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

        /* Stats Section */
        .stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            font-weight: 600;
            color: #2c3e50;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            color: #3498db;
        }

        /* Tasks Section */
        .tasks-section {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .task-list {
            list-style: none;
        }

        .task-item {
            background: white;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .task-item:hover {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .task-item.completed {
            background: #f8f9fa;
            opacity: 0.8;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #7f8c8d;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .task-content {
            flex: 1;
        }

        .task-text {
            font-size: 1.1rem;
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .task-meta {
            display: flex;
            gap: 15px;
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .task-date {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .task-priority {
            padding: 3px 8px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .priority-high {
            background: #e74c3c;
            color: white;
        }

        .priority-medium {
            background: #f39c12;
            color: white;
        }

        .priority-low {
            background: #2ecc71;
            color: white;
        }

        .task-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px;
            border-radius: 5px;
            transition: all 0.3s ease;
            color: #7f8c8d;
        }

        .action-btn:hover {
            background: #ecf0f1;
            color: #3498db;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 1.5rem;
            color: #2c3e50;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #7f8c8d;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
        }

        .form-row {
            display: flex;
            gap: 15px;
        }

        .form-row .form-group {
            flex: 1;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #7f8c8d;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #bdc3c7;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .task-item {
            animation: fadeIn 0.3s ease;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .app-header {
                flex-direction: column;
            }
            
            .task-input {
                min-width: auto;
            }
            
            .btn {
                padding: 12px 20px;
                justify-content: center;
            }
            
            .task-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .task-actions {
                align-self: flex-end;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 15px;
            }
            
            .filter-section {
                justify-content: center;
            }
            
            .stats {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><i class="fas fa-tasks"></i> To-Do List</h1>
        <p class="subtitle">Organize your tasks and boost your productivity</p>

        <!-- Header Section -->
        <div class="app-header">
            <div class="task-input">
                <input type="text" id="taskInput" placeholder="Enter a new task..." maxlength="200">
            </div>
            <button class="btn btn-primary" id="addTaskBtn">
                <i class="fas fa-plus"></i> Add Task
            </button>
            <button class="btn btn-secondary" id="addDetailedTaskBtn">
                <i class="fas fa-edit"></i> Add Detailed
            </button>
        </div>

        <!-- Filter Section -->
        <div class="filter-section">
            <button class="filter-btn active" data-filter="all">All Tasks</button>
            <button class="filter-btn" data-filter="pending">Pending</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
            <button class="filter-btn" data-filter="high">High Priority</button>
            <button class="filter-btn" data-filter="today">Due Today</button>
        </div>

        <!-- Stats Section -->
        <div class="stats">
            <div class="stat-item">
                <div class="stat-number" id="totalTasks">0</div>
                <div>Total Tasks</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="completedTasks">0</div>
                <div>Completed</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="pendingTasks">0</div>
                <div>Pending</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="todayTasks">0</div>
                <div>Due Today</div>
            </div>
        </div>

        <!-- Tasks Section -->
        <div class="tasks-section">
            <ul class="task-list" id="taskList">
                <!-- Tasks will be dynamically added here -->
                <div class="empty-state" id="emptyState">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>No tasks yet</h3>
                    <p>Add your first task to get started!</p>
                </div>
            </ul>
        </div>

        <!-- Action Buttons -->
        <div style="display: flex; gap: 10px; justify-content: center;">
            <button class="btn btn-warning" id="clearCompletedBtn">
                <i class="fas fa-broom"></i> Clear Completed
            </button>
            <button class="btn btn-danger" id="clearAllBtn">
                <i class="fas fa-trash"></i> Clear All
            </button>
        </div>
    </div>

    <!-- Add/Edit Task Modal -->
    <div class="modal" id="taskModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Add Detailed Task</h2>
                <button class="close-btn" id="closeModal">&times;</button>
            </div>
            <form id="taskForm">
                <input type="hidden" id="editTaskId">
                
                <div class="form-group">
                    <label for="taskTitle">Task Title *</label>
                    <input type="text" id="taskTitle" class="form-control" required maxlength="200">
                </div>
                
                <div class="form-group">
                    <label for="taskDescription">Description</label>
                    <textarea id="taskDescription" class="form-control" rows="3" placeholder="Add task details..."></textarea>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="taskDueDate">Due Date</label>
                        <input type="date" id="taskDueDate" class="form-control">
                    </div>
                    
                    <div class="form-group">
                        <label for="taskDueTime">Due Time</label>
                        <input type="time" id="taskDueTime" class="form-control">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="taskPriority">Priority</label>
                    <select id="taskPriority" class="form-control">
                        <option value="low">Low</option>
                        <option value="medium" selected>Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="taskCategory">Category</label>
                    <input type="text" id="taskCategory" class="form-control" placeholder="Work, Personal, Shopping...">
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 25px;">
                    <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn btn-success" id="saveTaskBtn">
                        <i class="fas fa-save"></i> Save Task
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        class TodoApp {
            constructor() {
                this.tasks = JSON.parse(localStorage.getItem('tasks')) || [];
                this.currentFilter = 'all';
                this.editingTaskId = null;
                
                this.initializeApp();
                this.setupEventListeners();
                this.renderTasks();
                this.updateStats();
            }

            initializeApp() {
                // Set minimum date to today
                const today = new Date().toISOString().split('T')[0];
                document.getElementById('taskDueDate').min = today;
            }

            setupEventListeners() {
                // Add task events
                document.getElementById('addTaskBtn').addEventListener('click', () => this.addQuickTask());
                document.getElementById('taskInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addQuickTask();
                });

                // Detailed task modal
                document.getElementById('addDetailedTaskBtn').addEventListener('click', () => this.openAddModal());
                document.getElementById('closeModal').addEventListener('click', () => this.closeModal());
                document.getElementById('cancelBtn').addEventListener('click', () => this.closeModal());
                document.getElementById('taskForm').addEventListener('submit', (e) => this.saveTask(e));

                // Filter events
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.setFilter(e.target.dataset.filter));
                });

                // Clear events
                document.getElementById('clearCompletedBtn').addEventListener('click', () => this.clearCompleted());
                document.getElementById('clearAllBtn').addEventListener('click', () => this.clearAll());

                // Close modal when clicking outside
                document.getElementById('taskModal').addEventListener('click', (e) => {
                    if (e.target.id === 'taskModal') this.closeModal();
                });
            }

            addQuickTask() {
                const input = document.getElementById('taskInput');
                const title = input.value.trim();

                if (title) {
                    const task = {
                        id: Date.now().toString(),
                        title: title,
                        description: '',
                        completed: false,
                        dueDate: null,
                        dueTime: null,
                        priority: 'medium',
                        category: 'General',
                        createdAt: new Date().toISOString()
                    };

                    this.tasks.push(task);
                    this.saveToLocalStorage();
                    this.renderTasks();
                    this.updateStats();
                    input.value = '';
                    
                    // Show success feedback
                    this.showNotification('Task added successfully!', 'success');
                }
            }

            openAddModal(taskId = null) {
                this.editingTaskId = taskId;
                const modal = document.getElementById('taskModal');
                const title = document.getElementById('modalTitle');
                const form = document.getElementById('taskForm');

                if (taskId) {
                    // Edit mode
                    title.textContent = 'Edit Task';
                    const task = this.tasks.find(t => t.id === taskId);
                    this.populateForm(task);
                } else {
                    // Add mode
                    title.textContent = 'Add Detailed Task';
                    form.reset();
                    document.getElementById('taskPriority').value = 'medium';
                    
                    // Set default date to tomorrow
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    document.getElementById('taskDueDate').value = tomorrow.toISOString().split('T')[0];
                }

                modal.style.display = 'flex';
            }

            populateForm(task) {
                document.getElementById('editTaskId').value = task.id;
                document.getElementById('taskTitle').value = task.title;
                document.getElementById('taskDescription').value = task.description || '';
                document.getElementById('taskDueDate').value = task.dueDate || '';
                document.getElementById('taskDueTime').value = task.dueTime || '';
                document.getElementById('taskPriority').value = task.priority;
                document.getElementById('taskCategory').value = task.category || '';
            }

            closeModal() {
                document.getElementById('taskModal').style.display = 'none';
                document.getElementById('taskForm').reset();
                this.editingTaskId = null;
            }

            saveTask(e) {
                e.preventDefault();

                const taskData = {
                    title: document.getElementById('taskTitle').value.trim(),
                    description: document.getElementById('taskDescription').value.trim(),
                    dueDate: document.getElementById('taskDueDate').value,
                    dueTime: document.getElementById('taskDueTime').value,
                    priority: document.getElementById('taskPriority').value,
                    category: document.getElementById('taskCategory').value.trim() || 'General'
                };

                if (!taskData.title) {
                    this.showNotification('Task title is required!', 'error');
                    return;
                }

                if (this.editingTaskId) {
                    // Update existing task
                    const taskIndex = this.tasks.findIndex(t => t.id === this.editingTaskId);
                    this.tasks[taskIndex] = { ...this.tasks[taskIndex], ...taskData };
                    this.showNotification('Task updated successfully!', 'success');
                } else {
                    // Add new task
                    const task = {
                        id: Date.now().toString(),
                        ...taskData,
                        completed: false,
                        createdAt: new Date().toISOString()
                    };
                    this.tasks.push(task);
                    this.showNotification('Task added successfully!', 'success');
                }

                this.saveToLocalStorage();
                this.renderTasks();
                this.updateStats();
                this.closeModal();
            }

            toggleTaskCompletion(taskId) {
                const task = this.tasks.find(t => t.id === taskId);
                if (task) {
                    task.completed = !task.completed;
                    this.saveToLocalStorage();
                    this.renderTasks();
                    this.updateStats();
                }
            }

            editTask(taskId) {
                this.openAddModal(taskId);
            }

            deleteTask(taskId) {
                if (confirm('Are you sure you want to delete this task?')) {
                    this.tasks = this.tasks.filter(t => t.id !== taskId);
                    this.saveToLocalStorage();
                    this.renderTasks();
                    this.updateStats();
                    this.showNotification('Task deleted successfully!', 'success');
                }
            }

            setFilter(filter) {
                this.currentFilter = filter;
                
                // Update active filter button
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.toggle('active', btn.dataset.filter === filter);
                });
                
                this.renderTasks();
            }

            clearCompleted() {
                if (confirm('Are you sure you want to clear all completed tasks?')) {
                    this.tasks = this.tasks.filter(t => !t.completed);
                    this.saveToLocalStorage();
                    this.renderTasks();
                    this.updateStats();
                    this.showNotification('Completed tasks cleared!', 'success');
                }
            }

            clearAll() {
                if (confirm('Are you sure you want to clear ALL tasks? This cannot be undone.')) {
                    this.tasks = [];
                    this.saveToLocalStorage();
                    this.renderTasks();
                    this.updateStats();
                    this.showNotification('All tasks cleared!', 'success');
                }
            }

            getFilteredTasks() {
                const today = new Date().toISOString().split('T')[0];
                
                switch (this.currentFilter) {
                    case 'pending':
                        return this.tasks.filter(t => !t.completed);
                    case 'completed':
                        return this.tasks.filter(t => t.completed);
                    case 'high':
                        return this.tasks.filter(t => t.priority === 'high');
                    case 'today':
                        return this.tasks.filter(t => t.dueDate === today);
                    default:
                        return this.tasks;
                }
            }

            renderTasks() {
                const taskList = document.getElementById('taskList');
                const filteredTasks = this.getFilteredTasks();

                if (filteredTasks.length === 0) {
                    taskList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-clipboard-list"></i>
                            <h3>No tasks found</h3>
                            <p>${this.currentFilter === 'all' ? 'Add your first task to get started!' : 'No tasks match your current filter'}</p>
                        </div>
                    `;
                    return;
                }

                taskList.innerHTML = filteredTasks.map(task => `
                    <li class="task-item ${task.completed ? 'completed' : ''}">
                        <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''} 
                               onchange="todoApp.toggleTaskCompletion('${task.id}')">
                        <div class="task-content">
                            <div class="task-text">${this.escapeHtml(task.title)}</div>
                            <div class="task-meta">
                                ${task.dueDate ? `
                                    <div class="task-date">
                                        <i class="far fa-calendar"></i>
                                        ${this.formatDate(task.dueDate)} ${task.dueTime ? `at ${task.dueTime}` : ''}
                                    </div>
                                ` : ''}
                                <div class="task-priority priority-${task.priority}">
                                    ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                                </div>
                                ${task.category ? `<div><i class="fas fa-tag"></i> ${this.escapeHtml(task.category)}</div>` : ''}
                            </div>
                            ${task.description ? `<div style="color: #7f8c8d; font-size: 0.9rem; margin-top: 5px;">${this.escapeHtml(task.description)}</div>` : ''}
                        </div>
                        <div class="task-actions">
                            <button class="action-btn" onclick="todoApp.editTask('${task.id}')" title="Edit">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-btn" onclick="todoApp.deleteTask('${task.id}')" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </li>
                `).join('');
            }

            updateStats() {
                const total = this.tasks.length;
                const completed = this.tasks.filter(t => t.completed).length;
                const pending = total - completed;
                const today = new Date().toISOString().split('T')[0];
                const todayTasks = this.tasks.filter(t => t.dueDate === today).length;

                document.getElementById('totalTasks').textContent = total;
                document.getElementById('completedTasks').textContent = completed;
                document.getElementById('pendingTasks').textContent = pending;
                document.getElementById('todayTasks').textContent = todayTasks;
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                });
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            showNotification(message, type) {
                // Create notification element
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    border-radius: 10px;
                    color: white;
                    font-weight: 600;
                    z-index: 1001;
                    animation: fadeIn 0.3s ease;
                    background: ${type === 'success' ? '#2ecc71' : '#e74c3c'};
                `;
                notification.textContent = message;

                document.body.appendChild(notification);

                // Remove notification after 3 seconds
                setTimeout(() => {
                    notification.style.animation = 'fadeOut 0.3s ease';
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);
            }

            saveToLocalStorage() {
                localStorage.setItem('tasks', JSON.stringify(this.tasks));
            }
        }

        // Add fadeOut animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                from { opacity: 1; transform: translateX(0); }
                to { opacity: 0; transform: translateX(100px); }
            }
        `;
        document.head.appendChild(style);

        // Initialize the app
        let todoApp;
        document.addEventListener('DOMContentLoaded', () => {
            todoApp = new TodoApp();
        });
    </script>
</body>
</html>
